// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id         Int      @id @default(autoincrement())
  name       String
  startAt    DateTime
  endAt      DateTime
  address    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  blocs      Bloc[]
  status     Status   @default(WAITING)
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

enum Status {
  WAITING
  ONGOING
  FINISHED
}

model Bloc {
  id          Int      @id @default(autoincrement())
  title       String
  startAt     DateTime
  endAt       DateTime
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  todos       Todo[]
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
}

model Todo {
  id         Int      @id @default(autoincrement())
  label      String
  bloc       Bloc     @relation(fields: [blocId], references: [id])
  blocId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
